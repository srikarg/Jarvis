// Generated by CoffeeScript 1.6.3
(function() {
  var help, moment, request, util;

  request = require('request');

  util = require('./utility_functions');

  help = require('./help');

  moment = require('moment');

  exports.calc = function(query, res) {
    if (query === '') {
      res.send(util.buildMessage('You need to enter an expression to calculate!'));
    }
    query = query.replace(/[^-()\d/*+.]/g, '');
    if (query === '') {
      res.send(util.buildMessage('There are no numbers!'));
    }
    return res.send(util.buildMessage("The result of " + query + " is " + (eval(query)) + "."));
  };

  exports.weather = function(query, res) {
    var url;
    if (query === '') {
      res.send(util.buildMessage('I need a location to find the weather for master!'));
      return;
    }
    url = "http://api.worldweatheronline.com/free/v1/weather.ashx?q=" + (encodeURIComponent(query)) + "&format=json&num_of_days=1&date=today&key=e4zcjce65nyscwr8jqsj8wwr";
    return request(url, function(error, response, body) {
      if (!error && response.statusCode === 200) {
        body = JSON.parse(body);
        if (body.data.error) {
          res.send(util.buildMessage('Sorry, but weather for that location could not be found.'));
          return;
        }
        return res.send(util.buildMessage("It is currently " + (body.data.current_condition[0].weatherDesc[0].value.toLowerCase()) + " and " + body.data.current_condition[0].temp_F + " degrees Fahrenheit in " + query + "."));
      } else {
        return res.send(util.buildMessage('I\'m sorry, but I\'m currently having trouble finding the weather for that location.'));
      }
    });
  };

  exports.dict = function(query, res) {
    var url;
    if (query === '') {
      res.send(util.buildMessage('I need a word to find the definition for master!'));
      return;
    }
    url = "http://api.duckduckgo.com/?q=define+" + (encodeURIComponent(query)) + "&format=json";
    return request(url, function(error, response, body) {
      var definition;
      if (!error && response.statusCode === 200) {
        body = JSON.parse(body);
        if (body.Definition != null) {
          definition = body.Definition.slice(body.Definition.indexOf(': ') + 1).replace(/'''/g, '"').trim();
          return res.send(util.buildMessage("<div class=\"dictionary\"><span class=\"bold\">" + query + "</span>: <span class=\"italics\">" + definition + "</span></div>"));
        } else {
          return res.send(util.buildMessage("I'm sorry, but the definition for <span class=\"bold\">" + query + "</span> could not be found!"));
        }
      } else {
        return res.send(util.buildMessage("I'm sorry, but I'm currently having trouble finding the definition for <span class=\"bold\">" + query + "</span>."));
      }
    });
  };

  exports.xkcd = function(query, res) {
    var url;
    if (query === '') {
      url = 'http://xkcd.com/info.0.json';
      return request(url, function(error, response, body) {
        if (!error && response.statusCode === 200) {
          body = JSON.parse(body);
          return res.send(util.buildMessage("<div class=\"xkcd\"><p><a href=\"http://xkcd.com/" + body.num + "/\">" + body.title + "</a></p><img src=\"" + body.img + "\" /></div>"));
        } else {
          return res.send(util.buildMessage('Sorry, but the most recent XKCD comic could not be retrieved.'));
        }
      });
    } else {
      if (!isNaN(query)) {
        url = "http://xkcd.com/" + query + "/info.0.json";
        return request(url, function(error, response, body) {
          if (!error && response.statusCode === 200) {
            body = JSON.parse(body);
            return res.send(util.buildMessage("<div class=\"xkcd\"><p><a href=\"http://xkcd.com/" + body.num + "/\">" + body.title + "</a></p><img src=\"" + body.img + "\" /></div>"));
          } else {
            return res.send(util.buildMessage('Sorry, but the comic with the given number was not found.'));
          }
        });
      } else {
        return res.send(util.buildMessage('Please enter a valid value for the comic number!'));
      }
    }
  };

  exports.image = function(query, res) {
    var url;
    if (query === '') {
      res.send(util.buildMessage('I need something to search an image for! Please enter something master!'));
      return;
    }
    url = "http://ajax.googleapis.com/ajax/services/search/images?v=1.0&q=" + (encodeURIComponent(query));
    return request(url, function(error, response, body) {
      var image, images, _ref;
      if (!error && response.statusCode === 200) {
        body = JSON.parse(body);
        if ((_ref = body.responseData) != null ? _ref.results : void 0) {
          images = body.responseData.results;
          if ((images != null ? images.length : void 0) > 0) {
            image = util.random(images);
            return res.send(util.buildMessage("<img src=\"" + image.unescapedUrl + "\" />"));
          }
        } else {
          return res.send(util.buildMessage("I'm sorry, but an image for <span class=\"bold\">" + query + "</span> could not be found!"));
        }
      } else {
        return res.send(util.buildMessage("I'm sorry, but I'm currently having trouble finding an image for <span class=\"bold\">" + query + "</span>."));
      }
    });
  };

  exports.help = function(res) {
    var docs, html, key, value;
    docs = help.getDocs();
    html = "<ul class=\"text-align-left\">";
    for (key in docs) {
      value = docs[key];
      html += "<li>!" + key + " &rarr; " + value + "</li>";
    }
    html += "</ul>";
    return res.send(util.buildMessage(html));
  };

}).call(this);
